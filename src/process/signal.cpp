/**
 * @file signal.cpp
 * @brief Signal event generated by system.
 * @author Shu, Zhong Hua
 * @date 2023-06-04
 */
#include <cstdio>
#include <signal.h>
#include <unistd.h>

namespace {

void termSignal(int sig)
{
    printf("I got signal %d\n", sig);

    // CTRL-C again, terminate program because of default signal handler behavior.
    signal(SIGINT, SIG_DFL);
}

}

int main()
{
    const int useSignalAction = 1;
    // Intercept the SIGINT signal generated when we type Ctrl-C.

    if (useSignalAction)
    {
        ::printf("Use sigaction\n");
        // signalaction is more robust and recommended to use.
        struct sigaction act;

        // Signal function.
        // Used functions in signal handler must be re-entrant to executed again without problems.
        act.sa_handler = termSignal;
        // Set of signals blocked and will be delivered to process.
        sigemptyset(&act.sa_mask);
        // Signal action modifies.
        // SA_RESTART: Interrupted function due to signal will be restarted, instead of EINTR error.
        act.sa_flags = 0;

        sigaction(SIGINT, &act, 0);
    }
    else
    {
        ::printf("Use signal\n");
        ::signal(SIGINT, termSignal);
    }

    while (1)
    {
        ::printf("Hello World!\n");
        ::sleep(1);
    }
}
